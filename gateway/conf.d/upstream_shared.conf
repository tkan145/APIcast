#{% capture proxy_cache_valid %}
#{#} proxy_cache $cache_zone;
#{#} proxy_cache_key $scheme$request_method$proxy_host$request_uri$service_id;
#{#} proxy_no_cache $cache_request;
#{#} proxy_cache_valid {{ env.APICAST_CACHE_STATUS_CODES | default: '200 302'}} {{ env.APICAST_CACHE_MAX_TIME | default: '1m' }};
#{% endcapture %}
#{{ proxy_cache_valid | replace: "#{#}", "" }}
#

#{% if opentelemetry != empty %}
#   {% capture opentelemetry_propagate_directive %}
#{#} opentelemetry_propagate;
#   {% endcapture %}
#   {{ opentelemetry_propagate_directive | replace: "#{#}", "" }}
#{% endif %}

proxy_pass $proxy_pass;

proxy_http_version 1.1;

proxy_set_header X-Real-IP  $remote_addr;
proxy_set_header Host $http_host;
proxy_set_header X-3scale-proxy-secret-token $secret_token;
proxy_set_header X-3scale-debug "";
proxy_set_header Connection $upstream_connection_header;
proxy_set_header Upgrade $upstream_upgrade_header;

# This is a bit tricky. It uses liquid to set a SSL client certificate. In
# NGINX, all this is not executed as it is commented with '#'. However, in
# Liquid, all this will be evaluated. As a result, the following directives
# are set optionally: proxy_ssl_certificate, proxy_ssl_certificate_key,
# proxy_ssl_session_reuse, and proxy_ssl_password_file.

# {% if proxy_ssl_certificate != empty and proxy_ssl_certificate_key != empty %}
#   {% capture proxy_ssl %}
#{#}   proxy_ssl_certificate {{ proxy_ssl_certificate }};
#{#}   proxy_ssl_certificate_key {{ proxy_ssl_certificate_key }};
#   {% endcapture %}
#   {{ proxy_ssl | replace: "#{#}", "" }}
#
#   {% if proxy_ssl_password_file != empty %}
#     {% capture proxy_ssl %}
#{#}   proxy_ssl_password_file {{ proxy_ssl_password_file }};
#     {% endcapture %}
#   {{ proxy_ssl | replace: "#{#}", "" }}
#   {% endif %}
#
#   {% if proxy_ssl_session_reuse != empty %}
#     {% capture proxy_ssl %}
#{#}   proxy_ssl_session_reuse {{ proxy_ssl_session_reuse }};
#     {% endcapture %}
#   {{ proxy_ssl | replace: "#{#}", "" }}
#   {% endif %}
# {% endif %}

# When 'upstream_retry_cases' is empty, apply the same default as NGINX.
# If the proxy_next_upstream directive is not declared, the retry policy
# will never retry.
# {% if upstream_retry_cases != empty %}
#   {% capture proxy_next_upstream %}
#{#}  proxy_next_upstream {{ upstream_retry_cases }};
#   {% endcapture %}
#   {{ proxy_next_upstream | replace: "#{#}", "" }}
# {% else %}
#   proxy_next_upstream error timeout;
# {% endif %}
